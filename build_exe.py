"""
Build Script for Line Analyzer
==============================
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ standalone .exe —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é PyInstaller

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python build_exe.py

–†–µ–∑—É–ª—å—Ç–∞—Ç:
    - dist/LineAnalyzer.exe - –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é .exe —Ñ–∞–π–ª
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path


def check_pyinstaller():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ PyInstaller"""
    try:
        import PyInstaller.__main__  
        return True
    except ImportError:
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç PyInstaller
        print("‚úó PyInstaller not found")
        print("\nInstalling PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úì PyInstaller installed successfully")
            return True
        except subprocess.CalledProcessError:
            print("‚úó Failed to install PyInstaller")
            return False


def clean_build_folders():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    folders_to_clean = ['build', 'dist', '__pycache__']
    
    for folder in folders_to_clean:
        if os.path.exists(folder):
            print(f"Cleaning {folder}/...")
            shutil.rmtree(folder, ignore_errors=True)
    
    # –£–¥–∞–ª—è–µ–º .spec —Ñ–∞–π–ª—ã
    for spec_file in Path('.').glob('*.spec'):
        print(f"Removing {spec_file}...")
        spec_file.unlink()
    
    print("‚úì Build folders cleaned")


def build_exe():
    """–°–æ–±–∏—Ä–∞–µ—Ç .exe —Ñ–∞–π–ª"""
    print("\n" + "="*60)
    print("Building Line Analyzer executable...")
    print("="*60 + "\n")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PyInstaller
    params = [
        sys.executable,                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π Python
        '-m', 'PyInstaller',            # –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller –∫–∞–∫ –º–æ–¥—É–ª—å
        '--onefile',                    # –û–¥–∏–Ω —Ñ–∞–π–ª
        '--windowed',                   # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è GUI)
        '--name=LineAnalyzer',          # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        '--icon=NONE',                  # –ò–∫–æ–Ω–∫–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é)
        '--add-data=line_geometry.py;.',  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏
        '--add-data=gui_app.py;.',
        '--hidden-import=customtkinter',
        '--hidden-import=matplotlib',
        '--hidden-import=PIL',
        '--hidden-import=numpy',
        '--clean',                      # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
        'main.py'                       # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
    ]
    
    print("Running PyInstaller with parameters:")
    print(" ".join(params))
    print()
    
    try:
        result = subprocess.run(params, check=True, capture_output=False)
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"\n‚úó Build failed with error code {e.returncode}")
        return False
    except Exception as e:
        print(f"\n‚úó Build failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def create_readme_for_dist():
    """–°–æ–∑–¥–∞–µ—Ç README –¥–ª—è –ø–∞–ø–∫–∏ dist"""
    readme_content = """
LINE ANALYZER - USER GUIDE
===========================

Thank you for using Line Analyzer!

WHAT IS THIS?
-------------
Line Analyzer is a tool for analyzing relationships between lines 
in the plane. It helps you determine if lines intersect, are parallel, 
or coincide, and calculates intersection points and angles.

HOW TO USE:
-----------
1. Double-click LineAnalyzer.exe to start the application
2. Enter the number of lines you want to analyze (minimum 2)
3. Click "Generate Input Fields"
4. Enter coefficients A, B, C for each line (Ax + By + C = 0)
5. Click "Analyze Lines" to see results
6. Click "Visualize" to see a graphical representation

REQUIREMENTS:
-------------
- Windows 7 or later
- No additional software needed - everything is included!

FEATURES:
---------
‚úì Modern, user-friendly interface
‚úì Accurate mathematical calculations
‚úì Visual representation of lines
‚úì Support for vertical and horizontal lines
‚úì Detailed analysis reports

TROUBLESHOOTING:
----------------
If the application doesn't start:
- Make sure your antivirus hasn't blocked it
- Try running as administrator
- Check that you have enough RAM (minimum 500 MB free)

For more information or support, contact your instructor.

Developed for Analytic Geometry Course
October 2025
"""
    
    dist_path = Path('dist')
    if dist_path.exists():
        readme_path = dist_path / 'README.txt'
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        print(f"‚úì Created {readme_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    print("\n" + "‚ïî" + "‚ïê"*58 + "‚ïó")
    print("‚ïë" + " "*15 + "LINE ANALYZER BUILD SCRIPT" + " "*16 + "‚ïë")
    print("‚ïö" + "‚ïê"*58 + "‚ïù\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyInstaller
    if not check_pyinstaller():
        print("\n‚úó Cannot proceed without PyInstaller")
        return False
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏
    print("\nCleaning old build files...")
    clean_build_folders()
    
    # –°–æ–±–∏—Ä–∞–µ–º .exe
    print("\nBuilding executable...")
    if build_exe():
        print("\n" + "="*60)
        print("‚úì BUILD SUCCESSFUL!")
        print("="*60)
        print("\nYour executable is ready:")
        print("  üìÅ dist/LineAnalyzer.exe")
        print("\nYou can distribute this file to users.")
        print("They can simply double-click it to run the application.")
        
        # –°–æ–∑–¥–∞–µ–º README
        create_readme_for_dist()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        exe_path = Path('dist/LineAnalyzer.exe')
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"\nFile size: {size_mb:.2f} MB")
        
        return True
    else:
        print("\n" + "="*60)
        print("‚úó BUILD FAILED")
        print("="*60)
        print("\nPlease check the error messages above.")
        print("Common issues:")
        print("  - Missing dependencies (install with pip)")
        print("  - Syntax errors in Python files")
        print("  - Insufficient disk space")
        return False


if __name__ == "__main__":
    try:
        success = main()
        
        if success:
            print("\n‚úì All done! Press Enter to exit...")
            input()
            sys.exit(0)
        else:
            print("\n‚úó Build failed. Press Enter to exit...")
            input()
            sys.exit(1)
    
    except KeyboardInterrupt:
        print("\n\n‚úó Build cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚úó Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        print("\nPress Enter to exit...")
        input()
        sys.exit(1)
